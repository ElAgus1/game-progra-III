// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean?
  accounts      Account[]
  sessions      Session[]
  user1         Chat[]    @relation("user1")
  user2         Chat[]    @relation("user2")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Chat {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId1 String @db.ObjectId
  userId2 String @db.ObjectId
  user1   User   @relation("user1", fields: [userId1], references: [id], onDelete: Cascade)
  user2   User   @relation("user2", fields: [userId2], references: [id], onDelete: Cascade)

  messages Message[]

  @@map(name: "chats")
}

model Message {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  chatId String @db.ObjectId
  value  String

  message Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}


model Resources {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  gold     Int?
  stone    Int?
  wood     Int?
  game     Game?  @relation

  @@map(name: "resources")
}

model Game {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  resources_id String     @db.ObjectId @unique
  field        Int[]
  resources    Resources  @relation(fields: [resources_id], references: [id], onDelete: Cascade)

  @@map(name: "game")
}
